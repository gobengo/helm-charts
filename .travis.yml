---
language: python
env:
  global:
  - HELM_URL=https://storage.googleapis.com/kubernetes-helm
  - HELM_TGZ=helm-v2.4.1-linux-amd64.tar.gz
  - TARGET_BR=gh-pages
  - REPO_DIR=/home/travis/build/gobengo/helm-charts
  - GH_URL=https://gobengo.github.io/helm-charts
  - YAMLLINT_VERSION=1.8.1
  - ENCRYPTION_LABEL=a9e98976121b
  - secure: |
      zEDBiksitH/W7GMlAdWLjoicv0nFkT3uL3gd81S//HDtQsI8imkIT5DBo3vXleEEfUmzkrF3knpcYMdDGO2BAf1CI+wG2w+32tGoMASEpW2QR/ags4pgcYEi+0PZVNLrl+gHx21lL2+1RMaavEWAvYYHqPu840IWb9Ah7Vbbr3LWO3SJJvoRl5pO+vH7JNeBWp2sdsdAbGdMaQzFkfI+09fhoy7cxIAHE5ZmVibjUZZS0jveuppKm8I652daqe6pNPHJFr1CUEQ9KVpRvN+q+nfqtxlWzwztkmotzFxsS8T7qnE7drS/trXXa/VCtmCXb7DFnAYmXzhcEKMM3xFRjb9XbsLEqx2USt3Ro+0z69ekukd07ygditglN26LG2Zdqiz1aXBL6Y8PjG4u91Unvqf7qJbW9me8/5TRkR5z2LXbY0hqjGFsJXdY73UEr0PEP0TI7lnZCLkK8Jg52S1gnel+bOSPnvOdz6786T+yMmFwnjDBf4pbcBs+OleVRFzcjsSivJuF+ti/OZ+oiac11CFi213j1vQwx1L7lOHs1pyTqck23Asom6V5gVDViL5nIMGuaK/E8gBoj/cPPj1Qxr8wTxGauok6E1kLHNt+SsUsli9t2SVaDas6IJh7jhYXO0vcm3jN/fTNhR7/DH5daTPTRDdTJ6ByEhMkYdfbA6I=
install:
- wget -q ${HELM_URL}/${HELM_TGZ}
- tar xzfv ${HELM_TGZ}
- PATH=`pwd`/linux-amd64/:$PATH
- helm init --client-only
- sudo pip install yamllint=="${YAMLLINT_VERSION}"
before_script:
- 'openssl aes-256-cbc -K $encrypted_${ENCRYPTION_LABEL}_key -iv $encrypted_${ENCRYPTION_LABEL}_iv
  -in deploy_key.enc -out deploy_key -d'
- cp deploy_key .ssh-keys/travis
- chmod 600 .ssh-keys/travis
- eval "$(ssh-agent -s)"
- ssh-add .ssh-keys/travis
script:
- |
  for dir in `ls ${REPO_DIR}/charts`; do
   helm lint ${REPO_DIR}/charts/$dir
   if [ $? != 0 ]; then
    travis_terminate 1
   fi
  done
- yamllint -c .yamllint.yml -s .travis.yml .yamllint.yml
- yamllint -c .yamllint.yml -s $(find . -type f -name "Chart.yaml")
- yamllint -c .yamllint.yml -s $(find . -type f -name "values.yaml")
after_success:
- |
  if [ $TRAVIS_BRANCH = 'master' ] && [ $TRAVIS_PULL_REQUEST = 'false' ]; then
    # Temporary dir for storing new packaged charts and index files
    BUILD_DIR=$(mktemp -d)

    # Useful URLs
    REPO_URL=`git config remote.origin.url`
    SSH_REPO=${REPO_URL/https:\/\/github.com\//git@github.com:}
    SHA=`git rev-parse --verify HEAD`

    # Push temporary directory to the stack
    pushd $BUILD_DIR

    # Iterate over all charts are package them
    for dir in `ls ${REPO_DIR}/charts`; do
     helm dep update ${REPO_DIR}/charts/$dir
     helm package ${REPO_DIR}/charts/$dir
    done

    # Indexing of charts
    if [ -f index.yaml ]; then
     helm repo index --url ${GH_URL} --merge index.yaml .
    else
     helm repo index --url ${GH_URL} .
    fi

    # Pop temporary directory from the stack
    popd

    # List all the contents that we will push
    ls ${BUILD_DIR}

    # Clone repository and empty target branch
    git clone ${REPO_URL} out
    cd out
    git checkout ${TARGET_BR} || git checkout --orphan ${TARGET_BR}
    cd ..
    rm -rf out/* || exit 0

    # Copying contents of BUILD_DIR to out folder
    cp $BUILD_DIR/* out/
    cd out

    # Deploy if there are some changes
    git diff --quiet
    if [ $? != 0 ]; then
     # Add all new files to staging phase and commit the changes
     git config user.name "Travis CI"
     git config user.email "travis@travis-ci.org"
     git add -A .
     git status
     git commit -m "Travis deploy ${SHA}"
     # We can push.
     git push ${SSH_REPO}
    fi
  fi
